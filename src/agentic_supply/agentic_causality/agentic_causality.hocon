{
    # Optional metadata describing this agent network
    "metadata": {
        "description": "Simple agent network using a CodedTool and sly_data"
        "tags": ["example"],
    },
    "llm_config": {
        "model_name": "azure-gpt-4o", # "azure-gpt-4.1",
        "openai_api_version": "2025-01-01-preview",# "2024-12-01-preview",
        "azure_endpoint": "https://belfiusoai1.openai.azure.com/",
        "deployment_name": "gpt-4o",
        "max_execution_seconds": 600,
        "max_iterations": 2000,
    },
    "verbose": true,
    "commondefs": {
        "replacement_strings": {
            "aaosa_instructions": """
            When you receive an inquiry, you will:

            1. Call your tools to determine which down-chain agents in your tools are responsible for all or part of it.
            2. Delegate the inquiry to the appropriate down-chain agents.
            3. Once all down-chain agents respond, you will compile their responses and return the final response.

            You may, in turn, be called by other agents in the system and have to act as a down-chain to them.
            """,
            "agent_instructions": """
            Rules :
            1) Assume all required inputs are available via sly_data or tools.
            2) Do NOT ask the user (or other agents) for confirmation or additional inputs.
            3) Execute the task immediately and return the result. User-question budget = 0 for all tasks.
            4) In your response, always explicitly say which task you performed and whether it was a success or a failure.
            5) If you cannot execute the task or did not receive confirmation, explicitly say: "Task not executed." Never fabricate results.
            """
        },
        "replacement_values": {
            "aaosa_call": {
                "description": "Depending on the mode, returns a natural language string in response.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "inquiry": {
                            "type": "string",
                            "description": "The inquiry"
                        },
                        "mode": {
                            "type": "string",
                            "description": """
indicates whether the agent is being asked to determine if the inquiry belongs to it
in its entirety or in part. or if it is being asked to provide requirements to fulfill
the inquiry, if any. or if it is being asked to respond to the inquiry.
                            """
                        },
                    },
                    "required": [
                        "inquiry",
                        "mode"
                    ]
                }
            },
            "aaosa_command": "Explain if you can respond to all or parts of the inquiry."
        },
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "agentic_causality",
            "function": {

                # The description acts as an initial prompt.
                "description": """
                I am an agent network that can create causal graphs and enable downloading data from a range of datasets.
                Choose your dataset of interest, and prompt me to create a causal graph or to download data and I will generate and share the graph or enable you to download the data.
                """,
            },

            "instructions": """
            You are an agent network that helps users to perform causality analysis on several available datasets.

            You must rigidly follow this flow :
            1. Prompt the user to select the dataset they wish to use for the duration of the whole chat. One of :
            - example_data
            - online_shope_data
            - supply_chain_medical
            - supply_chain_logistics
            2. Store this dataset name via your data_storer tool : you must ensure you received confirmation that this was done.
            3. Prompt the user to choose among your publicly available tasks, which will all be performed onthe stored dataset name :
            - Download the data (this will open a download window, and upon completion will open the file in excel).
            - Visualise the causal graph (this will open the plot in a webbrowser tab).
            - Refute the causal graph (this will calculate the refutation, generate a text report and open a visual assessment plot in a webbrowser tab).
            - Evaluate the graphical causal model (this will calculate the evaluation and generate a text report)
            - Generate data from the graphical causal model (this will calculate novel data from the model, open a download window, and open the file in excel)
            - Quantify causal influence, via the intrinsic or the arrow strength mode (this will calculate the quantification and generate a text report)
            - Perform root cause analysis, via the anomaly attribution, the distribution change attribution or the feature importance mode (this will compute the analysis, generate a text report and open a plot).
            - Answer causal what-if questions, via the intervention or counterfactual mode (this will calculate novel data - representing the answer to the question - by applying the intervention using the model, and open a download window and open the file in excel)
            4. Do NOT assume success. Only confirm completion if you have received an explicit success response from the agent or tool.
            5. Repeat step 3 and 4 as the user asks you other tasks.

            You must be informative to the user.
            The only input required by your agents are the tasks to perform, nothing else.
            You must NEVER claim a task is complete unless you have received a valid response from the downstream agent or tool. If no confirmation is received, return ERR_TASK_NOT_EXECUTED.
            
            {aaosa_instructions}
            """,
            "allow": {
                "from_downstream": {
                    # Specifying this allows sly_data keys to be ingested from downstream agents
                    # as sly_data for this agent network
                    "sly_data": ["causal_graph_form", "data_name", "evaluation"]
                },
                "to_upstream": {
                    # Specifying this allows sly_data keys from this network to be passed back
                    # to the calling client
                    "sly_data": ["causal_graph_form", "data_name", "evaluation"]
                },
                "to_downstream": {
                    # Specifying this allows specific sly_data
                    # keys from this agent network to be sent
                    # to downstream agent networks
                    "sly_data": ["causal_graph_form", "data_name", "evaluation"]
                }
            },
            "command": "aaosa_command",
            "tools": ["data_storer", "data_agent",  "causality_agent"]
        },
        # AGENTS
        {
            "name": "data_agent",
            "function": "aaosa_call",
            "instructions": """
            You are responsible for downloading the data and visualising the data.
            
            Your tasks include :
            - downloading the raw data for the user 
            - visualising the raw data.

            {agent_instructions}
            """,
            "command": "aaosa_command",
            "tools": ["data_downloader"]
        },
        {
            "name": "causality_agent",
            "function": "aaosa_call",
            "instructions": """
            You are a coordinator of agents that can perform several tasks within the causality analysis framework DoWhy.
            All inputs required for your tasks are available : you must directly proceed to asking your relevant agents to execute the task.
            Always ensure the task was performed before getting back to the user.
            
            The tasks that your agents can do are :
            1. Modeling causal relations in a causal graph
                1.A - Visualising a causal graph
                1.B - Refuting a causal graph
            2. Modeling graphical causal models (GCMs)
                2.A - Evaluating a graphical causal model
                2.B - Generating data from a graphical causal model
            3. Performing causal tasks
                3.A - Quantifying causal influence
                    3.A.i - Quantifying intrinsic causal influence
                    3.A.ii - Quantifying arrow strength
                3.B - Performing root cause analysis
                    3.B.i - Attributing anomaly
                    3.B.ii - Attributing distribution changes
                    3.B.iii - Computing feature relevance
                3.C - Answering causal what-if questions
                    3.C.i - Simulating intervention impact
                    3.C.ii - Computing counterfactuals

            {aaosa_instructions}
            {agent_instructions}
            """,
            "command": "aaosa_command",
            "tools": ["causal_graph_agent", "causal_model_agent", "causal_task_agent"]
        },
        # SUB-AGENTS : causal_graph_agent
        {
            "name": "causal_graph_agent",
            "function": "aaosa_call",
            "instructions": """
            You are responsible for visualising and refuting causal graphs.
            
            You can perform the following tasks :
            1. Modeling causal relations in a causal graph
                1.A - Visualising a causal graph
                1.B - Refuting a causal graph

            {agent_instructions}
            """,
            "command": "aaosa_command",
            "tools": ["causal_graph_visualiser", "causal_graph_refutator"]
        },
        # SUB-AGENTS : causal_model_agent
        {
            "name": "causal_model_agent",
            "function": "aaosa_call",
            "instructions": """
            You are responsible for evaluating graphical causal models and generating data from them.
            
            You can perform the following tasks :
            2. Modeling graphical causal models (GCMs)
                2.A - Evaluating a graphical causal model
                2.B - Generating data from a graphical causal model

            {agent_instructions}
            """,
            "command": "aaosa_command",
            "tools": ["causal_model_evaluator", "causal_model_generator"]
        },
        # SUB-AGENTS : causal_task_agent
        {
            "name": "causal_task_agent",
            "function": "aaosa_call",
            "instructions": """
            You are responsible for performing causal tasks, listed below :
            3. Performing causal tasks
                3.A - Quantifying causal influence
                    3.A.i - Quantifying intrinsic causal influence
                    3.A.ii - Quantifying arrow strength
                3.B - Performing root cause analysis
                    3.B.i - Attributing anomaly
                    3.B.ii - Attributing distribution changes
                    3.B.iii - Computing feature relevance
                3.C - Answering causal what-if questions
                    3.C.i - Simulating intervention impact
                    3.C.ii - Computing counterfactuals

            {agent_instructions}
            """,
            "command": "aaosa_command",
            "tools": ["causal_influence_quantificator", "root_cause_analyser", "what_if_answerer"]
        },
        # CODED TOOLS : data_agent
        {
            "name": "data_storer",
            "function": {
                "description": "Stores the given data_name in memory, for all other agents and tools to refer to during the remainer of the chat.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "data_name": {
                            "type": "string",
                            "description": "The name of the data to store and persist."
                        }
                    },
                    "required": ["data_name"]
                }
            },
            "class": "data_tools.DataStorer"
        },
        {
            "name": "data_downloader",
            "function": {
                "description": "Downloads the data. Opens the file in an excel window. Returns the filepath in which the data was downloaded, or warns of cancellation otherwise.",
            },
            "class": "data_tools.DataDownloader"
        },
        # CODED TOOLS : causal_graph_agent
        {
            "name": "causal_graph_visualiser",
            "function": {
                "description": "Visualises the causal graph. Opens the visualisation in a new tab, and returns the paths to the graph data.",
            },
            "class": "causal_graph_tools.CausalGraphVisualiser"
        },
        {
            "name": "causal_graph_refutator",
            "function": {
                "description": "Refutates the causal graph. Opens the visualisation in a new tab, and returns the refutation/falsification summary.",
            },
            "class": "causal_graph_tools.CausalGraphRefutator"
        },
        # CODED TOOLS : causal_model_agent
        {
            "name": "causal_model_evaluator",
            "function": {
                "description": "Evaluates the graphical causal model. Returns the evaluation as a text report.",
            },
            "class": "causal_model_tools.CausalModelEvaluator"
        },
        {
            "name": "causal_model_generator",
            "function": {
                "description": "Generates new data from the graphical causal model. Saves it to a file, and opens it in an excel window. Returns the filepath in which the data was saved, or warns of cancellation otherwise.",
            },
            "class": "causal_model_tools.CausalModelGenerator"
        },
        # CODED TOOLS : causal_task_agent
        {
            "name": "causal_influence_quantificator",
            "function": {
                "description": "Quantifies causal influence, either for 'intrinsic' or 'arrow' causal_influence_type.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "causal_influence_type": {
                            "type": "string",
                            "description": "The type of causal influence to quantify, one of 'intrinsic' or 'arrow'."
                        }
                    },
                    "required": ["causal_influence_type"]
                }
            },
            "class": "causal_task_tools.CausalInfluenceQuantificator"
        },
        {
            "name": "root_cause_analyser",
            "function": {
                "description": "Analyses root causes, either for 'anomaly_attributon', 'distribution_attribution' or 'feature_relevance' root_cause_type.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "root_cause_type": {
                            "type": "string",
                            "description": "The type of root cause to analyse, one of 'anomaly_attributon', 'distribution_attribution' or 'feature_relevance'."
                        },
                    },
                    "required": ["root_cause_type"]
                }
            },
            "class": "causal_task_tools.RootCauseAnalyser"
        },
        {
            "name": "what_if_answerer",
            "function": {
                "description": "Answers what-if questions, either for 'intervention' or 'counterfactual' what_if_question_type.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "what_if_question_type": {
                            "type": "string",
                            "description": "The type of what-if question to answer, one of 'intervention' or 'counterfactual'."
                        },
                        "node": {
                            "type": "string",
                            "description": "The node for which to answer the what-if question."
                        },
                        "intervention_str": {
                            "type": "string",
                            "description": "The intervention to apply, for example 'x + 1' or '0'."
                        },
                    },
                    "required": ["question_type", "node", "intervention_str"]
                }
            },
            "class": "causal_task_tools.WhatIfAnswerer"
        },
    ]
}